$date
	Fri Mar 04 04:57:06 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 1 ! WRITE $end
$var wire 8 " REGOUT1 [7:0] $end
$var wire 8 # READDATA [7:0] $end
$var wire 1 $ READ $end
$var wire 32 % PC [31:0] $end
$var wire 32 & INSTRUCTION [31:0] $end
$var wire 1 ' BUSYWAIT $end
$var wire 8 ( ALURESULT [7:0] $end
$var reg 1 ) CLK $end
$var reg 1 * RESET $end
$scope module my_data_memory $end
$var wire 1 ) clock $end
$var wire 1 * reset $end
$var wire 8 + writedata [7:0] $end
$var wire 1 ! write $end
$var wire 1 $ read $end
$var wire 8 , address [7:0] $end
$var reg 1 ' busywait $end
$var reg 1 - readaccess $end
$var reg 8 . readdata [7:0] $end
$var reg 1 / writeaccess $end
$var integer 32 0 i [31:0] $end
$upscope $end
$scope module mycpu $end
$var wire 1 ' BUSYWAIT $end
$var wire 1 ) CLK $end
$var wire 32 1 INSTRUCTION [31:0] $end
$var wire 8 2 READDATA [7:0] $end
$var wire 1 * RESET $end
$var wire 1 3 ZERO $end
$var wire 8 4 WRITERESULT [7:0] $end
$var wire 3 5 WRITEREG [2:0] $end
$var wire 1 6 WRITEENABLE $end
$var wire 1 ! WRITE $end
$var wire 8 7 VALUE2 [7:0] $end
$var wire 8 8 REGOUT2COMPLIMENT [7:0] $end
$var wire 8 9 REGOUT2 [7:0] $end
$var wire 8 : REGOUT1 [7:0] $end
$var wire 3 ; READREG2 [2:0] $end
$var wire 3 < READREG1 [2:0] $end
$var wire 1 $ READ $end
$var wire 1 = PICKWRITE $end
$var wire 32 > PCOUT [31:0] $end
$var wire 32 ? PCNEXT [31:0] $end
$var wire 32 @ PCBRANCH [31:0] $end
$var wire 8 A OPERAND2 [7:0] $end
$var wire 8 B OPCODE [7:0] $end
$var wire 8 C OFFSET [7:0] $end
$var wire 1 D MUXREGOUT2 $end
$var wire 1 E MUXJUMP $end
$var wire 1 F MUXIMMEDIATE $end
$var wire 1 G MUXBEQ $end
$var wire 8 H IMMEDIATE [7:0] $end
$var wire 8 I ALURESULT [7:0] $end
$var wire 3 J ALUOP [2:0] $end
$var reg 32 K PC [31:0] $end
$scope module ValueOPERAND2 $end
$var wire 8 L IMMEDIATE [7:0] $end
$var wire 8 M VALUE2 [7:0] $end
$var wire 1 F MUXIMMEDIATE $end
$var reg 8 N OPERAND2 [7:0] $end
$upscope $end
$scope module alu_result $end
$var wire 8 O DATA2 [7:0] $end
$var wire 1 3 ZERO $end
$var wire 3 P SELECT [2:0] $end
$var wire 8 Q RESULT [7:0] $end
$var wire 8 R OR_OUT [7:0] $end
$var wire 8 S FORWARD_OUT [7:0] $end
$var wire 8 T DATA1 [7:0] $end
$var wire 8 U AND_OUT [7:0] $end
$var wire 8 V ADD_OUT [7:0] $end
$scope module ZERO_MUX_result $end
$var wire 8 W ADD_OUT [7:0] $end
$var reg 1 3 ZERO $end
$upscope $end
$scope module add_result $end
$var wire 8 X DATA2 [7:0] $end
$var wire 8 Y DATA1 [7:0] $end
$var wire 8 Z ADD_OUT [7:0] $end
$upscope $end
$scope module and_result $end
$var wire 8 [ AND_OUT [7:0] $end
$var wire 8 \ DATA2 [7:0] $end
$var wire 8 ] DATA1 [7:0] $end
$upscope $end
$scope module forward_result $end
$var wire 8 ^ DATA2 [7:0] $end
$var wire 8 _ FORWARD_OUT [7:0] $end
$upscope $end
$scope module mux_result $end
$var wire 8 ` ADD_OUT [7:0] $end
$var wire 8 a AND_OUT [7:0] $end
$var wire 8 b FORWARD_OUT [7:0] $end
$var wire 3 c SELECT [2:0] $end
$var wire 8 d OR_OUT [7:0] $end
$var reg 8 e RESULT [7:0] $end
$upscope $end
$scope module or_result $end
$var wire 8 f DATA2 [7:0] $end
$var wire 8 g OR_OUT [7:0] $end
$var wire 8 h DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module compliment_operation $end
$var wire 8 i REGOUT2 [7:0] $end
$var reg 8 j REGOUT2COMPLIMENT [7:0] $end
$upscope $end
$scope module control_signals $end
$var wire 1 ' BUSYWAIT $end
$var wire 8 k OPCODE [7:0] $end
$var reg 3 l ALUOP [2:0] $end
$var reg 1 m MEMREAD $end
$var reg 1 n MEMWRITE $end
$var reg 1 G MUXBEQ $end
$var reg 1 F MUXIMMEDIATE $end
$var reg 1 E MUXJUMP $end
$var reg 1 D MUXREGOUT2 $end
$var reg 1 = PICKWRITE $end
$var reg 1 $ READ $end
$var reg 1 ! WRITE $end
$var reg 1 6 WRITEENABLE $end
$upscope $end
$scope module pc_adder $end
$var wire 32 o PC [31:0] $end
$var wire 32 p PCOUT [31:0] $end
$upscope $end
$scope module pc_final $end
$var wire 1 G MUXBEQ $end
$var wire 1 E MUXJUMP $end
$var wire 32 q PCOUT [31:0] $end
$var wire 1 3 ZERO $end
$var wire 32 r PCBRANCH [31:0] $end
$var reg 32 s PCNEXT [31:0] $end
$upscope $end
$scope module pc_jump_branch $end
$var wire 3 t ALUOP [2:0] $end
$var wire 8 u OFFSET [7:0] $end
$var wire 32 v PCOUT [31:0] $end
$var reg 32 w OFFSET_EXTENDED [31:0] $end
$var reg 32 x PCBRANCH [31:0] $end
$upscope $end
$scope module register_operation $end
$var wire 1 ) CLK $end
$var wire 3 y INADDRESS [2:0] $end
$var wire 3 z OUT1ADDRESS [2:0] $end
$var wire 3 { OUT2ADDRESS [2:0] $end
$var wire 1 * RESET $end
$var wire 1 6 WRITE $end
$var wire 8 | IN [7:0] $end
$var reg 8 } OUT1 [7:0] $end
$var reg 8 ~ OUT2 [7:0] $end
$upscope $end
$scope module sub_or_not $end
$var wire 1 D MUXREGOUT2 $end
$var wire 8 !" REGOUT2 [7:0] $end
$var wire 8 "" REGOUT2COMPLIMENT [7:0] $end
$var reg 8 #" VALUE2 [7:0] $end
$upscope $end
$scope module write_alu_or_mem $end
$var wire 8 $" ALURESULT [7:0] $end
$var wire 1 = PICKWRITE $end
$var wire 8 %" READDATA [7:0] $end
$var reg 8 &" WRITERESULT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
b11111111111111111111111111111100 o
xn
0m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
b11111111111111111111111111111100 K
bx J
bx I
bx H
xG
xF
xE
xD
bx C
bx B
bx A
bx @
bx ?
bx >
x=
bx <
bx ;
bx :
bx 9
bx 8
bx 7
x6
bx 5
bx 4
x3
bx 2
bx 1
b100000000 0
0/
bx .
0-
bx ,
bx +
1*
0)
bx (
0'
bx &
b11111111111111111111111111111100 %
x$
bx #
bx "
x!
$end
#1
b0 ?
b0 s
b0 >
b0 p
b0 q
b0 v
#4
1)
#5
b0 %
b0 K
b0 o
#6
b100 ?
b100 s
b100 >
b100 p
b100 q
b100 v
#7
b101 A
b101 N
b101 O
b101 X
b101 \
b101 ^
b101 f
b10000 w
b0 B
b0 k
b0 <
b0 z
b101 ;
b101 {
b101 H
b101 L
b100 5
b100 y
b100 C
b100 u
b1000000000000000101 &
b1000000000000000101 1
#8
b101 4
b101 |
b101 &"
b101 (
b101 ,
b101 I
b101 Q
b101 e
b101 $"
b0x0x U
b0x0x [
b0x0x a
bx1x1 R
bx1x1 d
bx1x1 g
0=
0!
0$
0E
0G
16
1D
1F
b0 J
b0 P
b0 c
b0 l
b0 t
b101 S
b101 _
b101 b
0)
#9
b0 7
b0 M
b0 #"
b0 9
b0 i
b0 ~
b0 !"
b0 "
b0 +
b0 :
b0 T
b0 Y
b0 ]
b0 h
b0 }
b10100 @
b10100 r
b10100 x
#10
b0 8
b0 j
b0 ""
b101 R
b101 d
b101 g
b0 U
b0 [
b0 a
#11
03
b101 V
b101 W
b101 Z
b101 `
#12
1)
#16
0)
#20
1)
#24
0)
#28
1)
#32
0)
#36
1)
#40
0)
#44
1)
#48
0)
#52
1)
#56
0)
#60
1)
#64
0)
#68
1)
#72
0)
#76
1)
#80
0)
#84
1)
#88
0)
#92
1)
#96
0)
#100
1)
#104
0)
#108
1)
#112
0)
#116
1)
#120
0)
#124
1)
#128
0)
#132
1)
#136
0)
#140
1)
#144
0)
#148
1)
#152
0)
#156
1)
#160
0)
#164
1)
#168
0)
#172
1)
#176
0)
#180
1)
#184
0)
#188
1)
#192
0)
#196
1)
#200
0)
#204
1)
#208
0)
#212
1)
#216
0)
#220
1)
#224
0)
#228
1)
#232
0)
#236
1)
#240
0)
#244
1)
#248
0)
#252
1)
#256
0)
#260
1)
#264
0)
#268
1)
#272
0)
#276
1)
#280
0)
#284
1)
#288
0)
#292
1)
#296
0)
#300
1)
#304
0)
#308
1)
#312
0)
#316
1)
#320
0)
#324
1)
#328
0)
#332
1)
#336
0)
#340
1)
#344
0)
#348
1)
#352
0)
#356
1)
#360
0)
#364
1)
#368
0)
#372
1)
#376
0)
#380
1)
#384
0)
#388
1)
#392
0)
#396
1)
#400
0)
#404
1)
#408
0)
#412
1)
#416
0)
#420
1)
#424
0)
#428
1)
#432
0)
#436
1)
#440
0)
#444
1)
#448
0)
#452
1)
#456
0)
#460
1)
#464
0)
#468
1)
#472
0)
#476
1)
#480
0)
#484
1)
#488
0)
#492
1)
#496
0)
#500
1)
